#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(clippy::missing_safety_doc)]
/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Debug)]
pub struct GraphvizSys {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_Graphviz() {
    assert_eq!(
        ::std::mem::size_of::<GraphvizSys>(),
        1usize,
        concat!("Size of: ", stringify!(Graphviz))
    );
    assert_eq!(
        ::std::mem::align_of::<GraphvizSys>(),
        1usize,
        concat!("Alignment of ", stringify!(Graphviz))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8Graphviz7versionEv"]
    pub fn Graphviz_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8Graphviz9lastErrorEv"]
    pub fn Graphviz_lastError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8Graphviz6layoutEPKcS1_S1_"]
    pub fn Graphviz_layout(
        this: *mut GraphvizSys,
        dot: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        engine: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8GraphvizC1Ebi"]
    pub fn Graphviz_Graphviz(this: *mut GraphvizSys, yInvert: bool, nop: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN8GraphvizD1Ev"]
    pub fn Graphviz_Graphviz_destructor(this: *mut GraphvizSys);
}
impl GraphvizSys {
    #[inline]
    pub unsafe fn version() -> *const ::std::os::raw::c_char {
        Graphviz_version()
    }
    #[inline]
    pub unsafe fn lastError() -> *const ::std::os::raw::c_char {
        Graphviz_lastError()
    }
    #[inline]
    pub unsafe fn layout(
        &mut self,
        dot: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        engine: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        Graphviz_layout(self, dot, format, engine)
    }
    #[inline]
    pub unsafe fn new(yInvert: bool, nop: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Graphviz_Graphviz(__bindgen_tmp.as_mut_ptr(), yInvert, nop);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Graphviz_Graphviz_destructor(self)
    }
}
